#!/usr/bin/env python

import argparse
import json
import statistics

parser = argparse.ArgumentParser()
parser.add_argument('gold_file')
parser.add_argument('prediction_file')
parser.add_argument('--dict_file')
parser.add_argument('--known_file')
parser.add_argument('--freq_file')
args = parser.parse_args()

gold_tokens = json.load(open(args.gold_file, 'r'))
predictions_type = json.load(open(args.prediction_file, 'r'))

dictionary = set()
if args.dict_file:
    dictionary = set(json.load(open(args.dict_file, 'r')))

known_dict = set()
if args.known_file:
    known_dict = set(json.load(open(args.known_file, 'r')))

if args.freq_file:
    freq_dict = json.load(open(args.freq_file, 'r'))
    def isFrequent(toktext):
        freq = freq_dict.get(toktext, 0)
        return freq > 9
else:
    def isFrequent(toktext):
        return False

tp = 0
fp = 0
fn = 0

number_of_candidates = []

for token in gold_tokens:
    type_text = token['type']

    ## skip known words
    if type_text in known_dict:
        continue

    ## skip frequent words
    if isFrequent(type_text):
        continue

    gold_variants = set(token['variants'])
    pred_variants = set(predictions_type.get(type_text, []))

    if dictionary:
        gold_variants = gold_variants.intersection(dictionary)
        pred_variants = pred_variants.intersection(dictionary)

    ## filter frequent spelling variants
    gold_variants = set([variant for variant in gold_variants if not isFrequent(variant)])
    pred_variants = set([variant for variant in pred_variants if not isFrequent(variant)])

    tp += len(gold_variants.intersection(pred_variants))
    fp += len(pred_variants.difference(gold_variants))
    fn += len(gold_variants.difference(pred_variants))

    number_of_candidates.append(len(pred_variants))


precision = tp/(tp + fp) if tp + fp > 0 else 1
recall = tp/(tp + fn) if tp + fn > 0 else 1
f1 = 2*(precision * recall)/(precision + recall)

print("|".join(
    map(lambda s: str("%.2f" % s),
        [
            precision,
            recall,
            f1
        ])) + "|" +
      # avg number of candidates
      str("%.2f" % statistics.mean(number_of_candidates)) + '+-' +
      str("%.2f" % statistics.stdev(number_of_candidates)))
