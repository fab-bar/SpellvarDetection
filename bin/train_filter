#!/usr/bin/env python

import argparse
import json

from spellvardetection.type_filter import createTrainableTypeFilter

parser = argparse.ArgumentParser()
parser.add_argument('filter_name')
parser.add_argument('filter_settings')
parser.add_argument('modelfile_name')
parser.add_argument('positive_pairs')
parser.add_argument('negative_pairs')

parser.add_argument('-c', '--feature_cache', nargs='?')
args = parser.parse_args()

positive_pairs = json.load(open(args.positive_pairs, 'r'))
negative_pairs = json.load(open(args.negative_pairs, 'r'))

filter_settings = json.loads(args.filter_settings)

if args.feature_cache is not None and 'feature_extractors' in filter_settings:
    feature_cache = json.load(open(args.feature_cache, 'r'))
    for feature_extractor in filter_settings['feature_extractors']:
        if 'key' in feature_extractor:
            feature_extractor['cache'] = feature_cache

cand_filter = createTrainableTypeFilter(
    args.filter_name,
    filter_settings
)
cand_filter.train(positive_pairs, negative_pairs)
cand_filter.save(args.modelfile_name)
